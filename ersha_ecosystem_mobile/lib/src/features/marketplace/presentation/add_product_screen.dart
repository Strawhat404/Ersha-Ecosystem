import 'dart:io';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:ersha_ecosystem_mobile/src/features/auth/provider/auth_provider.dart';
import 'package:ersha_ecosystem_mobile/src/features/marketplace/domain/product_model.dart';
import 'package:ersha_ecosystem_mobile/src/features/marketplace/provider/marketplace_provider.dart';
import 'package:flutter/material.dart';
import 'package:iconsax/iconsax.dart';
import 'package:image_picker/image_picker.dart';
import 'package:provider/provider.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;


class AddProductScreen extends StatefulWidget {
  const AddProductScreen({super.key});

  @override
  State<AddProductScreen> createState() => _AddProductScreenState();
}

class _AddProductScreenState extends State<AddProductScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _priceController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _quantityController = TextEditingController();
  DateTime? _selectedHarvestDate;
  String? _selectedCategory;
  String? _selectedUnit;
final List<Map<String, String>> _categories = [
  {'value': 'vegetables', 'label': 'Vegetables'},
  {'value': 'fruits', 'label': 'Fruits'},
  {'value': 'grains', 'label': 'Grains & Cereals'},
  {'value': 'dairy', 'label': 'Dairy Products'},
  {'value': 'coffee', 'label': 'Coffee & Tea'},
  {'value': 'spices', 'label': 'Spices & Herbs'},
  {'value': 'legumes', 'label': 'Legumes'},
  {'value': 'tubers', 'label': 'Tubers & Roots'},
  {'value': 'other', 'label': 'Other'},
];
final List<Map<String, String>> _units = [
  {'value': 'kg', 'label': 'Kilogram'},
  {'value': 'ton', 'label': 'Ton'},
  {'value': 'quintal', 'label': 'Quintal'},
  {'value': 'liter', 'label': 'Liter'},
  {'value': 'piece', 'label': 'Piece'},
  {'value': 'bundle', 'label': 'Bundle'},
];
  String? _selectedImagePath;

  @override
  void dispose() {
    _nameController.dispose();
    _priceController.dispose();
    _descriptionController.dispose();
    _quantityController.dispose();
    super.dispose();
  }

  Future<void> _pickImage() async {
    final picker = ImagePicker();
    final pickedFile = await picker.pickImage(source: ImageSource.gallery);

    if (pickedFile != null) {
      if (kIsWeb) {
        // On web, read as bytes and convert to base64
        final bytes = await pickedFile.readAsBytes();
        setState(() {
          _selectedImagePath = base64Encode(bytes);
        });
      } else {
        // On mobile, use file path
        setState(() {
          _selectedImagePath = pickedFile.path;
        });
      }
    }
  }

  void _removeImage() {
    setState(() {
      _selectedImagePath = null;
    });
  }


  void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      if (_selectedImagePath == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Please select an image.')),
        );
        return;
      }
      final authProvider = Provider.of<AuthProvider>(context, listen: false);
      debugPrint('DEBUG: Token from AuthProvider before product API call: ${authProvider.token}');
      if (authProvider.isAuthenticated && authProvider.user?.userType.toLowerCase() == 'farmer') {
        // No longer need to encode image here
        final product = Product(
          id: '', // Will be generated by the backend
          name: _nameController.text,
          price: double.parse(_priceController.text),
          description: _descriptionController.text,
          category: _selectedCategory!,
          unit: _selectedUnit!,
          quantity: double.parse(_quantityController.text),
          harvestDate: _selectedHarvestDate!,
          images: [], // Images will be sent as a file
          farmerId: authProvider.user!.id.toString(),
        );
        // Print token before API call
        debugPrint('DEBUG: Using token for product API call: ${authProvider.token}');
        final marketplaceProvider = Provider.of<MarketplaceProvider>(context, listen: false);
        final success = await marketplaceProvider.addProduct(product, _selectedImagePath!, authProvider.token!);
      
        if (success) {
          // Refresh the marketplace with current user context after adding product
          print('=== ADD PRODUCT SCREEN DEBUG ===');
          print('DEBUG: Product added successfully, now refreshing marketplace');
          print('DEBUG: User ID: ${authProvider.user?.id.toString()}');
          print('DEBUG: User Type: ${authProvider.user?.userType}');
          
          await marketplaceProvider.fetchProducts(
            userRole: authProvider.user?.userType,
            userId: authProvider.user?.id.toString(),
          );
          
          print('DEBUG: Marketplace refresh completed');
        
          Navigator.pop(context);
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Product added successfully!')),
          );
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Failed to add product: ${Provider.of<MarketplaceProvider>(context, listen: false).error}')),
          );
        }
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Only farmers can add products.')),
        );
      }
    }
  }

  Widget _buildImagePreview() {
    if (_selectedImagePath == null) {
      return GestureDetector(
        onTap: _pickImage,
        child: Container(
          width: 100,
          decoration: BoxDecoration(
            border: Border.all(color: Colors.grey[300]!),
            borderRadius: BorderRadius.circular(12),
          ),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.add_circle_outline, color: Colors.grey[500], size: 32),
              const SizedBox(height: 4),
              Text('Add Image', style: TextStyle(color: Colors.grey[600], fontSize: 12)),
            ],
          ),
        ),
      );
    }

    if (kIsWeb) {
      // On web, _selectedImagePath is base64
      final bytes = base64Decode(_selectedImagePath!);
      return Stack(
        children: [
          Container(
            width: 100,
            height: 100,
            margin: const EdgeInsets.only(left: 8),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(12),
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(12),
              child: Image.memory(bytes, fit: BoxFit.cover, width: 100, height: 100),
            ),
          ),
          Positioned(
            right: 4,
            top: 4,
            child: GestureDetector(
              onTap: _removeImage,
              child: Container(
                padding: const EdgeInsets.all(2),
                decoration: const BoxDecoration(
                  color: Colors.white,
                  shape: BoxShape.circle,
                ),
                child: const Icon(Icons.close, size: 16, color: Colors.red),
              ),
            ),
          ),
        ],
      );
    } else {
      // On mobile, use FileImage
      final image = FileImage(File(_selectedImagePath!));
      return Stack(
        children: [
          Container(
            width: 100,
            height: 100,
            margin: const EdgeInsets.only(left: 8),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(12),
              image: DecorationImage(
                image: image,
                fit: BoxFit.cover,
              ),
            ),
          ),
          Positioned(
            right: 4,
            top: 4,
            child: GestureDetector(
              onTap: _removeImage,
              child: Container(
                padding: const EdgeInsets.all(2),
                decoration: const BoxDecoration(
                  color: Colors.white,
                  shape: BoxShape.circle,
                ),
                child: const Icon(Icons.close, size: 16, color: Colors.red),
              ),
            ),
          ),
        ],
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Add Listing', style: TextStyle(fontWeight: FontWeight.bold)),
        centerTitle: true,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back_ios, size: 20),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Product Images
              const Text('Product Image', style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
              const SizedBox(height: 8),
              Text('Add 1 image', style: TextStyle(color: Colors.grey[600], fontSize: 14)),
              const SizedBox(height: 12),
              SizedBox(
                height: 120,
                child: _buildImagePreview(),
              ),
              const SizedBox(height: 24),

              // Product Name
              TextFormField(
                controller: _nameController,
                decoration: const InputDecoration(
                  labelText: 'Product Name',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Iconsax.box_1),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a product name';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),

              // Category Dropdown
              DropdownButtonFormField<String>(
                value: _selectedCategory,
                decoration: const InputDecoration(
                  labelText: 'Category',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Iconsax.category),
                ),
                items: _categories.map((cat) {
                  return DropdownMenuItem(
                    value: cat['value'],
                    child: Text(cat['label']!),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _selectedCategory = value;
                  });
                },
                validator: (value) {
                  if (value == null) {
                    return 'Please select a category';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),

              // Price and Unit
              Row(
                children: [
                  // Price
                  Expanded(
                    flex: 3,
                    child: TextFormField(
                      controller: _priceController,
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        labelText: 'Price',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Iconsax.money),
                      ),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Enter price';
                        }
                        if (double.tryParse(value) == null) {
                          return 'Enter a valid number';
                        }
                        return null;
                      },
                    ),
                  ),
                  const SizedBox(width: 16),
                  // Unit
                    Expanded(
                      flex: 2,
                      child: DropdownButtonFormField<String>(
                        value: _selectedUnit,
                        decoration: const InputDecoration(
                          labelText: 'Unit',
                          border: OutlineInputBorder(),
                        ),
                        items: _units.map((unit) {
                          return DropdownMenuItem(
                            value: unit['value'],
                            child: Text(unit['label']!),
                          );
                        }).toList(),
                        onChanged: (value) {
                          setState(() {
                            _selectedUnit = value;
                          });
                        },
                        validator: (value) {
                          if (value == null) {
                            return 'Select unit';
                          }
                          return null;
                        },
                      ),
                    ),
                ],
              ),
              const SizedBox(height: 16),

              // Quantity and Harvest Date
              Row(
                children: [
                  Expanded(
                    child: TextFormField(
                      controller: _quantityController,
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        labelText: 'Quantity',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Iconsax.ruler),
                      ),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Enter quantity';
                        }
                        if (double.tryParse(value) == null) {
                          return 'Enter a valid number';
                        }
                        return null;
                      },
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: TextFormField(
                      readOnly: true,
                      decoration: InputDecoration(
                        labelText: 'Harvest Date',
                        border: const OutlineInputBorder(),
                        prefixIcon: const Icon(Iconsax.calendar),
                        hintText: _selectedHarvestDate == null
                            ? 'Select Date'
                            : "${_selectedHarvestDate!.toLocal()}".split(' ')[0],
                      ),
                      onTap: () async {
                        DateTime? pickedDate = await showDatePicker(
                          context: context,
                          initialDate: DateTime.now(),
                          firstDate: DateTime(2000),
                          lastDate: DateTime(2101),
                        );
                        if (pickedDate != null) {
                          setState(() {
                            _selectedHarvestDate = pickedDate;
                          });
                        }
                      },
                      validator: (value) {
                        if (_selectedHarvestDate == null) {
                          return 'Please select a harvest date';
                        }
                        return null;
                      },
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),

              // Description
              TextFormField(
                controller: _descriptionController,
                maxLines: 4,
                decoration: const InputDecoration(
                  labelText: 'Description',
                  border: OutlineInputBorder(),
                  alignLabelWithHint: true,
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a description';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 32),

              // Publish Button
              SizedBox(
                width: double.infinity,
                height: 50,
                child: ElevatedButton(
                  onPressed: _submitForm,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF4CAF50),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  child: const Text('Publish', style: TextStyle(fontSize: 16)),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}