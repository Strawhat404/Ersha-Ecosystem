name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.11.0
        
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      working-directory: ./Ersha_Ecosystem_Frontend
      run: pnpm install --frozen-lockfile
      
    - name: Run linting
      working-directory: ./Ersha_Ecosystem_Frontend
      run: pnpm lint
      
    - name: Build frontend
      working-directory: ./Ersha_Ecosystem_Frontend
      run: pnpm build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: ./Ersha_Ecosystem_Frontend/dist
        retention-days: 7

  backend-build:
    name: Backend Build
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: agriculture_marketplace
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and test backend with docker compose
      working-directory: ./Ersha_Ecosystem_Backend
      run: |
        # Create .env file from example if it doesn't exist
        if [ ! -f .env ]; then
          cp .env.example .env
        fi
        
        # Build the images using CI-specific compose file
        docker compose -f docker-compose.ci.yml build
        
        # Test that the build was successful by running a simple command
        docker compose -f docker-compose.ci.yml run --rm web python manage.py check
        
    - name: Test database migrations
      working-directory: ./Ersha_Ecosystem_Backend
      run: |
        # Wait for services to be ready
        sleep 10
        
        # Test migrations using CI-specific compose file
        docker compose -f docker-compose.ci.yml run --rm web python manage.py makemigrations --check --dry-run
        
    - name: Cleanup Docker resources
      if: always()
      working-directory: ./Ersha_Ecosystem_Backend
      run: |
        docker compose -f docker-compose.ci.yml down --volumes --remove-orphans

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: ./frontend-build
        
    - name: Verify frontend build
      run: |
        if [ -d "./frontend-build" ]; then
          echo "✅ Frontend build artifacts found"
          ls -la ./frontend-build
        else
          echo "❌ Frontend build artifacts not found"
          exit 1
        fi
        
    - name: Verify backend build
      working-directory: ./Ersha_Ecosystem_Backend
      run: |
        # Verify Dockerfile exists
        if [ -f "Dockerfile" ]; then
          echo "✅ Dockerfile found"
        else
          echo "❌ Dockerfile not found"
          exit 1
        fi
        
        # Verify docker-compose.yml exists
        if [ -f "docker-compose.yml" ]; then
          echo "✅ docker-compose.yml found"
        else
          echo "❌ docker-compose.yml not found"
          exit 1
        fi 